using BenchmarkDotNet.Attributes;
using F0.CodeAnalysis.CSharp.Benchmarking;
using Microsoft.CodeAnalysis.CSharp;

namespace F0.Gen.IsEnumDefined.UnitBenchmarks;

public class IsEnumDefinedGeneratorUnitBenchmarks
{
    private readonly CSharpIncrementalGeneratorBenchmark<IsEnumDefinedGenerator> _benchmark = new();

    [GlobalSetup]
    public void Setup()
    {
        //language=c#
        string code = """
            using System;
            using Microsoft.Extensions.Logging;
            using Roslyn.Generated;

            namespace Tests
            {
                internal static partial class Empty
                {
                }

                internal static partial class EnumInfo
                {
                }
            }

            namespace Tests
            {
                [IsEnumDefined<StringComparison>]
                internal static partial class EnumInfo
                {
                }
            }

            namespace @Tests
            {
                [IsEnumDefined<StringSplitOptions>]
                internal static partial class @EnumInfo
                {
                }
            }

            [IsEnumDefined<LogLevel>]
            internal static partial class EnumInfo
            {
            }

            namespace Microsoft.Extensions.Logging
            {
                public enum LogLevel
                {
                }
            }
            """;

        _benchmark.Initialize(new CSharpIncrementalGeneratorBenchmarkInitializationContext
        {
            Source = code,
            ParseOptions = new CSharpParseOptions(LanguageVersion.Preview),
        });
    }

    [Benchmark]
    public object Generate()
    {
        return _benchmark.Invoke();
    }

    [GlobalCleanup]
    public void Cleanup()
    {
        //language=c#
        string attribute = """
            // <auto-generated/>
            #nullable enable

            namespace Roslyn.Generated;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("F0.Gen.IsEnumDefined", "1.0.0.0")]
            [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = true)]
            internal sealed class IsEnumDefinedAttribute<TEnum> : global::System.Attribute
                where TEnum : struct, global::System.Enum
            {
            }

            """;

        //language=c#
        string generatedNamespace = """
            // <auto-generated/>
            #nullable enable

            namespace Tests;

            partial class EnumInfo
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("F0.Gen.IsEnumDefined", "1.0.0.0")]
                public static bool IsDefined(global::System.StringComparison value)
                {
                    return value is
                        global::System.StringComparison.CurrentCulture or
                        global::System.StringComparison.CurrentCultureIgnoreCase or
                        global::System.StringComparison.InvariantCulture or
                        global::System.StringComparison.InvariantCultureIgnoreCase or
                        global::System.StringComparison.Ordinal or
                        global::System.StringComparison.OrdinalIgnoreCase;
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("F0.Gen.IsEnumDefined", "1.0.0.0")]
                public static bool IsDefined(global::System.StringSplitOptions value)
                {
                    return value is
                        global::System.StringSplitOptions.None or
                        global::System.StringSplitOptions.RemoveEmptyEntries or
                        global::System.StringSplitOptions.TrimEntries;
                }
            }

            """;

        //language=c#
        string generatedGlobal = """
            // <auto-generated/>
            #nullable enable

            partial class EnumInfo
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("F0.Gen.IsEnumDefined", "1.0.0.0")]
                public static bool IsDefined(global::Microsoft.Extensions.Logging.LogLevel value)
                {
                    return false;
                }
            }

            """;

        _benchmark.Inspect(new CSharpIncrementalGeneratorBenchmarkInspectionContext
        {
            Source = ("Roslyn.Generated.IsEnumDefinedAttribute.g.cs", attribute),
            AdditionalSources =
            {
                ("Tests.EnumInfo.IsDefined.g.cs", generatedNamespace),
                ("EnumInfo.IsDefined.g.cs", generatedGlobal)
            },
        });
    }
}
