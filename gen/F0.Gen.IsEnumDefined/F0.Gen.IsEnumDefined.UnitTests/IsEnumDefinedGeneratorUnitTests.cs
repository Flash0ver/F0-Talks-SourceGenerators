using Xunit;
using VerifyCS = F0.Gen.IsEnumDefined.UnitTests.Verifiers.CSharpSourceGeneratorVerifier<F0.Gen.IsEnumDefined.IsEnumDefinedGenerator>;

namespace F0.Gen.IsEnumDefined.UnitTests;

public class IsEnumDefinedGeneratorUnitTests
{
    //language=c#
    private const string Attribute = """
        // <auto-generated/>
        #nullable enable

        namespace Roslyn.Generated;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("F0.Gen.IsEnumDefined", "1.0.0.0")]
        [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = true)]
        internal sealed class IsEnumDefinedAttribute<TEnum> : global::System.Attribute
            where TEnum : struct, global::System.Enum
        {
        }

        """;

    [Fact]
    public async Task Generator_NoCandidates_AddAttributeUnconditionally()
    {
        //language=c#
        string code = """
            using System;
            using Roslyn.Generated;

            namespace Tests;

            internal static partial class EnumInfo
            {
            }
            """;

        await VerifyCS.VerifyGeneratorAsync(code,
            ("Roslyn.Generated.IsEnumDefinedAttribute.g.cs", Attribute));
    }

    [Fact]
    public async Task Generator_WithCandidate_AddPartialMethod()
    {
        //language=c#
        string code = """
            using System;
            using Roslyn.Generated;

            namespace Tests;

            [IsEnumDefined<StringComparison>]
            internal static partial class EnumInfo
            {
            }
            """;

        //language=c#
        string generated = """
            // <auto-generated/>
            #nullable enable

            namespace Tests;

            partial class EnumInfo
            {
                public static bool IsDefined(global::System.StringComparison value)
                {
                    return value is
                        global::System.StringComparison.CurrentCulture or
                        global::System.StringComparison.CurrentCultureIgnoreCase or
                        global::System.StringComparison.InvariantCulture or
                        global::System.StringComparison.InvariantCultureIgnoreCase or
                        global::System.StringComparison.Ordinal or
                        global::System.StringComparison.OrdinalIgnoreCase;
                }
            }

            """;

        await VerifyCS.VerifyGeneratorAsync(code,
            ("Roslyn.Generated.IsEnumDefinedAttribute.g.cs", Attribute),
            ("Tests.EnumInfo.IsDefined.g.cs", generated));
    }

    [Fact]
    public async Task Generator_WithCandidates_AddPartialMethods()
    {
        //language=c#
        string code = """
            using System;
            using Microsoft.Extensions.Logging;
            using Roslyn.Generated;

            namespace Tests
            {
                [IsEnumDefined<StringComparison>]
                internal static partial class EnumInfo
                {
                }
            }

            namespace @Tests
            {
                [IsEnumDefined<StringSplitOptions>]
                internal static partial class @EnumInfo
                {
                }
            }

            [IsEnumDefined<LogLevel>]
            internal static partial class EnumInfo
            {
            }
            
            namespace Microsoft.Extensions.Logging
            {
                public enum LogLevel
                {
                }
            }
            """;

        //language=c#
        string generatedNamespace = """
            // <auto-generated/>
            #nullable enable

            namespace Tests;

            partial class EnumInfo
            {
                public static bool IsDefined(global::System.StringComparison value)
                {
                    return value is
                        global::System.StringComparison.CurrentCulture or
                        global::System.StringComparison.CurrentCultureIgnoreCase or
                        global::System.StringComparison.InvariantCulture or
                        global::System.StringComparison.InvariantCultureIgnoreCase or
                        global::System.StringComparison.Ordinal or
                        global::System.StringComparison.OrdinalIgnoreCase;
                }

                public static bool IsDefined(global::System.StringSplitOptions value)
                {
                    return value is
                        global::System.StringSplitOptions.None or
                        global::System.StringSplitOptions.RemoveEmptyEntries;
                }
            }

            """;

        //language=c#
        string generatedGlobal = """
            // <auto-generated/>
            #nullable enable

            partial class EnumInfo
            {
                public static bool IsDefined(global::Microsoft.Extensions.Logging.LogLevel value)
                {
                    return false;
                }
            }

            """;

        await VerifyCS.VerifyGeneratorAsync(code,
            ("Roslyn.Generated.IsEnumDefinedAttribute.g.cs", Attribute),
            ("Tests.EnumInfo.IsDefined.g.cs", generatedNamespace),
            ("EnumInfo.IsDefined.g.cs", generatedGlobal));
    }
}
