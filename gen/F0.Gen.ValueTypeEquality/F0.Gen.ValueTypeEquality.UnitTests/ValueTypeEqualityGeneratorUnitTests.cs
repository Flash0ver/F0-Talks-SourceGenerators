using Microsoft.CodeAnalysis.Testing;
using Xunit;
//using VerifyCS = F0.Gen.ValueTypeEquality.UnitTests.Verifiers.CSharpIncrementalGeneratorVerifier<F0.Gen.ValueTypeEquality.IncrementalValueTypeEqualityGenerator>;
using VerifyCS = F0.Gen.ValueTypeEquality.UnitTests.Verifiers.CSharpSourceGeneratorVerifier<F0.Gen.ValueTypeEquality.ValueTypeEqualityGenerator>;

namespace F0.Gen.ValueTypeEquality.UnitTests;

public class ValueTypeEqualityGeneratorUnitTests
{
    [Fact]
    public async Task Generator_NoCandidates_AddAttributeUnconditionally()
    {
        string code = @"
using System;

namespace Tests
{
    public class MyClass
    {
        public int Number { get; init; }
        public string Text { get; init; }
    }

    public struct MyStruct
    {
        public int Number { get; init; }
        public string Text { get; init; }
    }

    public struct MyEquatableStruct : IEquatable<MyStruct>
    {
        public int Number { get; init; }
        public string Text { get; init; }

        public bool Equals(MyStruct other)
        {
            throw new NotImplementedException();
        }
    }

    public record struct MyRecordStruct(int Number, string Text);

    public readonly record struct MyReadOnlyRecordStruct(int Number, string Text);
}
";

        await VerifyCS.VerifyGeneratorAsync(code, DiagnosticResult.EmptyDiagnosticResults);
    }

    [Fact]
    public async Task Generator_WithCandidates_AddPartialMethods()
    {
        string code = @"
using System;

namespace Tests
{
    public partial struct MyPartialStruct
    {
        public int Number { get; init; }
        public string Text { get; init; }
    }
}

public partial struct MyGlobalStruct
{
    public char Character { get; init; }
    public long Number { get; init; }
}
";

        string generatedStruct = @"// <auto-generated/>
#nullable enable

namespace Tests;

partial struct MyPartialStruct : global::System.IEquatable<MyPartialStruct>
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public static bool operator ==(MyPartialStruct left, MyPartialStruct right)
    {
        return left.Equals(right);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public static bool operator !=(MyPartialStruct left, MyPartialStruct right)
    {
        return !(left == right);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public override int GetHashCode()
    {
        return global::System.HashCode.Combine(Number, Text);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public override bool Equals([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] object? obj)
    {
        return obj is MyPartialStruct && Equals((MyPartialStruct)obj);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public bool Equals(MyPartialStruct other)
    {
        return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(Number, other.Number) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(Text, other.Text);
    }
}
";

        string generatedGlobalStruct = @"// <auto-generated/>
#nullable enable


partial struct MyGlobalStruct : global::System.IEquatable<MyGlobalStruct>
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public static bool operator ==(MyGlobalStruct left, MyGlobalStruct right)
    {
        return left.Equals(right);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public static bool operator !=(MyGlobalStruct left, MyGlobalStruct right)
    {
        return !(left == right);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public override int GetHashCode()
    {
        return global::System.HashCode.Combine(Character, Number);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public override bool Equals([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] object? obj)
    {
        return obj is MyGlobalStruct && Equals((MyGlobalStruct)obj);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.ValueTypeEquality"", ""1.0.0.0"")]
    public bool Equals(MyGlobalStruct other)
    {
        return global::System.Collections.Generic.EqualityComparer<char>.Default.Equals(Character, other.Character) && global::System.Collections.Generic.EqualityComparer<long>.Default.Equals(Number, other.Number);
    }
}
";

        await VerifyCS.VerifyGeneratorAsync(code,
            ("MyPartialStruct.ValueTypeEquality.g.cs", generatedStruct),
            ("MyGlobalStruct.ValueTypeEquality.g.cs", generatedGlobalStruct));
    }
}
