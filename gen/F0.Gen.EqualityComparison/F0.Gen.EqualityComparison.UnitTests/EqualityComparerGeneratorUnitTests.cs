using Microsoft.CodeAnalysis.Testing;
using Xunit;
using VerifyCS = F0.Gen.EqualityComparison.UnitTests.Verifiers.CSharpSourceGeneratorVerifier<F0.Gen.EqualityComparison.EqualityComparerGenerator>;

namespace F0.Gen.EqualityComparison.UnitTests;

public class EqualityComparerGeneratorUnitTests
{
    private const string Attribute = @"// <auto-generated/>
#nullable enable

namespace Roslyn.Generated;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
[global::System.AttributeUsageAttribute(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class EqualityComparerAttribute : global::System.Attribute
{
    public EqualityComparerAttribute(global::System.Type type)
    {
        Type = type;
    }

    public global::System.Type Type { get; }
}
";

    [Fact]
    public async Task Generator_NoCandidates_AddAttributeUnconditionally()
    {
        string code = @"
using System;
using System.Collections.Generic;

#nullable enable

namespace Tests;

[Roslyn.Generated.EqualityComparerAttribute(typeof(MyClass))]
public static class StaticClass { }

[Roslyn.Generated.EqualityComparerAttribute(typeof(MyClass))]
public class NonPartialClass { }

[EqualityComparerAttribute(typeof(MyClass))]
public partial class BadAttribute { }

[Roslyn.Generated.EqualityComparerAttribute(typeof(MyClass))]
public partial class EqualityComparer : IEqualityComparer<MyClass>
{
    public bool Equals(MyClass? x, MyClass? y) => throw new NotImplementedException();
    public int GetHashCode(MyClass obj) => throw new NotImplementedException();
}

[{|#0:Roslyn.Generated.EqualityComparerAttribute()|}]
public partial class NoPositionalArguments { }

[{|#1:Roslyn.Generated.EqualityComparerAttribute(typeof(MyClass), typeof(MyClass))|}]
public partial class TooManyPositionalArguments { }

public sealed class MyClass
{
    public int Number { get; init; }
    public string Text { get; init; } = null!;
}

[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class EqualityComparerAttribute : Attribute
{
    public EqualityComparerAttribute(global::System.Type type)
    {
        Type = type;
    }

    public global::System.Type Type { get; }
}
";

        DiagnosticResult[] diagnostics =
        {
            DiagnosticResult.CompilerError("CS7036").WithLocation(0).WithArguments("type", "Roslyn.Generated.EqualityComparerAttribute.EqualityComparerAttribute(System.Type)"),
            DiagnosticResult.CompilerError("CS1729").WithLocation(1).WithArguments("Roslyn.Generated.EqualityComparerAttribute", "2"),
        };

        await VerifyCS.VerifyGeneratorAsync(code, diagnostics, ("EqualityComparerAttribute.g.cs", Attribute));
    }

    [Fact]
    public async Task Generator_WithCandidates_AddPartialMethods()
    {
        string code = @"
using System;
using Roslyn.Generated;
using Alias = Roslyn.Generated.EqualityComparerAttribute;

#nullable enable

namespace Tests;

[EqualityComparerAttribute(typeof(MyClass))]
public partial class MyClassEqualityComparer { }

[Alias(typeof(MyStruct))]
public partial class MyStructEqualityComparer { }

public sealed class MyClass
{
    public int Number { get; init; }
    public string Text { get; init; } = null!;
}

public readonly struct MyStruct
{
    public int Number { get; init; }
    public string Text { get; init; }
}
";

        string generatedReferenceType = @"// <auto-generated/>
#nullable enable

namespace Tests;

partial class MyClassEqualityComparer : global::System.Collections.Generic.IEqualityComparer<global::Tests.MyClass?>
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    private MyClassEqualityComparer() { }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public static MyClassEqualityComparer Instance { get; } = new MyClassEqualityComparer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public bool Equals(global::Tests.MyClass? x, global::Tests.MyClass? y)
    {
        if ((object?)x == y)
        {
            return true;
        }

        if (x is null || y is null)
        {
            global::System.Diagnostics.Debug.Assert(x is null ^ y is null);
            return false;
        }

        return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(x.Number, y.Number) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(x.Text, y.Text);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public int GetHashCode(global::Tests.MyClass obj)
    {
        if (obj is null)
        {
            return 0;
        }

        return global::System.HashCode.Combine(obj.Number, obj.Text);
    }
}
";

        string generatedValueType = @"// <auto-generated/>
#nullable enable

namespace Tests;

partial class MyStructEqualityComparer : global::System.Collections.Generic.IEqualityComparer<global::Tests.MyStruct>
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    private MyStructEqualityComparer() { }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public static MyStructEqualityComparer Instance { get; } = new MyStructEqualityComparer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public bool Equals(global::Tests.MyStruct x, global::Tests.MyStruct y)
    {
        return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(x.Number, y.Number) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(x.Text, y.Text);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public int GetHashCode(global::Tests.MyStruct obj)
    {
        return global::System.HashCode.Combine(obj.Number, obj.Text);
    }
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("EqualityComparerAttribute.g.cs", Attribute),
            ("Tests.MyClassEqualityComparer.EqualityComparer.g.cs", generatedReferenceType),
            ("Tests.MyStructEqualityComparer.EqualityComparer.g.cs", generatedValueType));
    }

    [Fact]
    public async Task Generator_WithNamespacesAndAccessibility_AddPartialMethods()
    {
        string code = @"
using System;
using Roslyn.Generated;

internal class GlobalClass
{
    public int Number { get; init; }
    public string Text { get; init; }
}

namespace Lexically
{
    namespace Nested
    {
        namespace Namespace
        {
            internal class TopLevelClass
            {
                internal sealed class NestedClass : DerivedClass
                {
                    private string writeOnly;

                    public static string Static { get; }
                    public string Public { get; init; }
                    protected string Protected { get; init; }
                    internal string Internal { get; init; }
                    protected internal string ProtectedInternal { get; init; }
                    private string Private { get; init; }
                    private protected string PrivateProtected { get; init; }
                    public string WriteOnly { init => writeOnly = value; }
                }

                internal class DerivedClass : AbstractClass
                {
                    public override int Abstract { get; init; }
                    public override int Virtual { get; init; }
                }

                internal abstract class AbstractClass
                {
                    public abstract int Abstract { get; init; }
                    public virtual int Virtual { get; init; }
                }
            }
        }
    }
}

[EqualityComparer(typeof(GlobalClass))]
internal partial class GlobalClassEqualityComparer { }

namespace Nested.Namespace
{
    [EqualityComparer(typeof(Lexically.Nested.Namespace.TopLevelClass.NestedClass))]
    internal partial class NestedClassEqualityComparer { }
}
";

        string global = @"// <auto-generated/>
#nullable enable


partial class GlobalClassEqualityComparer : global::System.Collections.Generic.IEqualityComparer<global::GlobalClass?>
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    private GlobalClassEqualityComparer() { }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public static GlobalClassEqualityComparer Instance { get; } = new GlobalClassEqualityComparer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public bool Equals(global::GlobalClass? x, global::GlobalClass? y)
    {
        if ((object?)x == y)
        {
            return true;
        }

        if (x is null || y is null)
        {
            global::System.Diagnostics.Debug.Assert(x is null ^ y is null);
            return false;
        }

        return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(x.Number, y.Number) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(x.Text, y.Text);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public int GetHashCode(global::GlobalClass obj)
    {
        if (obj is null)
        {
            return 0;
        }

        return global::System.HashCode.Combine(obj.Number, obj.Text);
    }
}
";

        string nested = @"// <auto-generated/>
#nullable enable

namespace Nested.Namespace;

partial class NestedClassEqualityComparer : global::System.Collections.Generic.IEqualityComparer<global::Lexically.Nested.Namespace.TopLevelClass.NestedClass?>
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    private NestedClassEqualityComparer() { }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public static NestedClassEqualityComparer Instance { get; } = new NestedClassEqualityComparer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public bool Equals(global::Lexically.Nested.Namespace.TopLevelClass.NestedClass? x, global::Lexically.Nested.Namespace.TopLevelClass.NestedClass? y)
    {
        if ((object?)x == y)
        {
            return true;
        }

        if (x is null || y is null)
        {
            global::System.Diagnostics.Debug.Assert(x is null ^ y is null);
            return false;
        }

        return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(x.Abstract, y.Abstract) && global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(x.Virtual, y.Virtual) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(x.Public, y.Public) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(x.Internal, y.Internal) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(x.ProtectedInternal, y.ProtectedInternal);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public int GetHashCode(global::Lexically.Nested.Namespace.TopLevelClass.NestedClass obj)
    {
        if (obj is null)
        {
            return 0;
        }

        return global::System.HashCode.Combine(obj.Abstract, obj.Virtual, obj.Public, obj.Internal, obj.ProtectedInternal);
    }
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("EqualityComparerAttribute.g.cs", Attribute),
            ("GlobalClassEqualityComparer.EqualityComparer.g.cs", global),
            ("Nested.Namespace.NestedClassEqualityComparer.EqualityComparer.g.cs", nested));
    }
}
