using BenchmarkDotNet.Attributes;
using F0.CodeAnalysis.CSharp.Benchmarking;

namespace F0.Gen.EqualityComparison.Benchmarks;

public class EqualityComparerGeneratorBenchmarks
{
    private readonly CSharpIncrementalGeneratorBenchmark<EqualityComparerGenerator> benchmark = new();

    [GlobalSetup]
    public void Setup()
    {
        string code = @"
using System;
using System.Collections.Generic;
using Roslyn.Generated;
using Alias = Roslyn.Generated.EqualityComparerAttribute;

#nullable enable

namespace Benchmarks
{
    [EqualityComparerAttribute(typeof(MyClass))]
    public static class StaticClass { }

    [EqualityComparerAttribute(typeof(MyClass))]
    public class NonPartialClass { }

    [EqualityComparerAttribute(typeof(MyClass))]
    public partial class EqualityComparer : IEqualityComparer<MyClass>
    {
        public bool Equals(MyClass? x, MyClass? y) => throw new NotImplementedException();
        public int GetHashCode(MyClass obj) => throw new NotImplementedException();
    }

    [EqualityComparerAttribute(typeof(MyClass))]
    public partial class MyClassEqualityComparer { }

    [Alias(typeof(MyStruct))]
    public partial class MyStructEqualityComparer { }

    public sealed class MyClass : MyBase
    {
        public int Number { get; init; }
        public string Text { get; init; } = null!;
    }

    public abstract class MyBase
    {
        public bool Base { get; init; }
    }

    public readonly struct MyStruct
    {
        public int Number { get; init; }
        public string Text { get; init; }
    }
}
";

        benchmark.Initialize(new CSharpIncrementalGeneratorBenchmarkInitializationContext
        {
            Source = code,
        });
    }

    [Benchmark]
    public object Generate()
    {
        return benchmark.Invoke();
    }

    [GlobalCleanup]
    public void Cleanup()
    {
        string attribute = @"// <auto-generated/>
#nullable enable

namespace Roslyn.Generated;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
[global::System.AttributeUsageAttribute(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class EqualityComparerAttribute : global::System.Attribute
{
    public EqualityComparerAttribute(global::System.Type type)
    {
        Type = type;
    }

    public global::System.Type Type { get; }
}
";

        string generatedClass = @"// <auto-generated/>
#nullable enable

namespace Benchmarks;

partial class MyClassEqualityComparer : global::System.Collections.Generic.IEqualityComparer<global::Benchmarks.MyClass?>
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    private MyClassEqualityComparer() { }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public static MyClassEqualityComparer Instance { get; } = new MyClassEqualityComparer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public bool Equals(global::Benchmarks.MyClass? x, global::Benchmarks.MyClass? y)
    {
        if ((object?)x == y)
        {
            return true;
        }

        if (x is null || y is null)
        {
            global::System.Diagnostics.Debug.Assert(x is null ^ y is null);
            return false;
        }

        return global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(x.Base, y.Base) && global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(x.Number, y.Number) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(x.Text, y.Text);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public int GetHashCode(global::Benchmarks.MyClass obj)
    {
        if (obj is null)
        {
            return 0;
        }

        return global::System.HashCode.Combine(obj.Base, obj.Number, obj.Text);
    }
}
";

        string generatedStruct = @"// <auto-generated/>
#nullable enable

namespace Benchmarks;

partial class MyStructEqualityComparer : global::System.Collections.Generic.IEqualityComparer<global::Benchmarks.MyStruct>
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    private MyStructEqualityComparer() { }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public static MyStructEqualityComparer Instance { get; } = new MyStructEqualityComparer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public bool Equals(global::Benchmarks.MyStruct x, global::Benchmarks.MyStruct y)
    {
        return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(x.Number, y.Number) && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(x.Text, y.Text);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.EqualityComparison"", ""1.0.0.0"")]
    public int GetHashCode(global::Benchmarks.MyStruct obj)
    {
        return global::System.HashCode.Combine(obj.Number, obj.Text);
    }
}
";

        benchmark.Inspect(new CSharpIncrementalGeneratorBenchmarkInspectionContext
        {
            Source = ("EqualityComparerAttribute.g.cs", attribute),
            AdditionalSources =
            {
                ("Benchmarks.MyClassEqualityComparer.EqualityComparer.g.cs", generatedClass),
                ("Benchmarks.MyStructEqualityComparer.EqualityComparer.g.cs", generatedStruct),
            },
        });
    }
}
