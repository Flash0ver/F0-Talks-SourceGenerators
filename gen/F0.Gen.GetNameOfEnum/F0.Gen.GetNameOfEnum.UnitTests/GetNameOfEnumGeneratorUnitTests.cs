using Microsoft.CodeAnalysis.Testing;
using Xunit;
using VerifyCS = F0.Gen.GetNameOfEnum.UnitTests.Verifiers.CSharpSourceGeneratorVerifier<F0.Gen.GetNameOfEnum.GetNameOfEnumGenerator>;

namespace F0.Gen.GetNameOfEnum.UnitTests;

public class GetNameOfEnumGeneratorUnitTests
{
    private const string Attribute = @"// <auto-generated/>
#nullable enable

namespace Roslyn.Generated;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""F0.Gen.GetNameOfEnum"", ""1.0.0.0"")]
[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = false)]
internal sealed class GetNameOfEnumAttribute : global::System.Attribute
{
}
";

    [Fact]
    public async Task Generator_NoCandidates_AddAttributeUnconditionally()
    {
        string code = @"#nullable enable
using System;

namespace MyNamespace.Tests;

public class NonPartialClass
{
    [Roslyn.Generated.GetNameOfEnumAttribute]
    public partial string? {|#0:GetName|}(StringComparison value);
}

public partial class EnumInfo
{
    [Roslyn.Generated.GetNameOfEnumAttribute]
    public string? {|#1:NonPartialMethod|}(StringComparison value);

    public partial string? {|#2:NoAttribute|}(StringComparison value);

    [Tests.GetNameOfEnumAttribute]
    public partial string? {|#3:WrongAttribute|}(StringComparison value);

    [Tests.GetNameOfEnumAttribute]
    public partial void {|#4:WrongReturnType|}(StringComparison value);

    [Roslyn.Generated.GetNameOfEnumAttribute]
    public partial string? {|#5:NoParameter|}();

    [Roslyn.Generated.GetNameOfEnumAttribute]
    public partial string? {|#6:WrongParameter|}(string value);
}

[AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
internal sealed class GetNameOfEnumAttribute : Attribute
{
}
";

        DiagnosticResult cs0501 = DiagnosticResult.CompilerError("CS0501"); //'member function' must declare a body because it is not marked abstract, extern, or partial
        DiagnosticResult cs0751 = DiagnosticResult.CompilerError("CS0751"); //A partial method must be declared within a partial type
        DiagnosticResult cs8795 = DiagnosticResult.CompilerError("CS8795"); //Partial method must have an implementation part because it has accessibility modifiers

        DiagnosticResult[] diagnostics =
        {
            cs0751.WithLocation(0).WithArguments(),
            cs8795.WithLocation(0).WithArguments("MyNamespace.Tests.NonPartialClass.GetName(System.StringComparison)"),
            cs0501.WithLocation(1).WithArguments("MyNamespace.Tests.EnumInfo.NonPartialMethod(System.StringComparison)"),
            cs8795.WithLocation(2).WithArguments("MyNamespace.Tests.EnumInfo.NoAttribute(System.StringComparison)"),
            cs8795.WithLocation(3).WithArguments("MyNamespace.Tests.EnumInfo.WrongAttribute(System.StringComparison)"),
            cs8795.WithLocation(4).WithArguments("MyNamespace.Tests.EnumInfo.WrongReturnType(System.StringComparison)"),
            cs8795.WithLocation(5).WithArguments("MyNamespace.Tests.EnumInfo.NoParameter()"),
            cs8795.WithLocation(6).WithArguments("MyNamespace.Tests.EnumInfo.WrongParameter(string)"),
        };

        await VerifyCS.VerifyGeneratorAsync(code, diagnostics, ("Roslyn.Generated.GetNameOfEnumAttribute.g.cs", Attribute));
    }

    [Fact]
    public async Task Generator_WithCandidates_AddPartialMethods()
    {
        string code = @"#nullable enable
using System;
using System.IO;
using Roslyn.Generated;

public readonly partial struct Global
{
    [GetNameOfEnum]
    public partial string? GetName(FileAccess access);
}

namespace @MyNamespace.@Tests
{
    public partial class @EnumInfo
    {
        [GetNameOfEnum]
        public partial string? @GetName1(StringComparison value);
    }

    public sealed partial class @EnumInfo
    {
        [@GetNameOfEnumAttribute()]
        public static partial System.String @GetName2(DateTimeKind @val);
    }
}
";

        string global = @"// <auto-generated/>
#nullable enable

partial struct Global
{
    public partial string? GetName(global::System.IO.FileAccess access)
    {
        return access switch
        {
            global::System.IO.FileAccess.Read => nameof(global::System.IO.FileAccess.Read),
            global::System.IO.FileAccess.Write => nameof(global::System.IO.FileAccess.Write),
            global::System.IO.FileAccess.ReadWrite => nameof(global::System.IO.FileAccess.ReadWrite),
            _ => null,
        };
    }
}
";

        string generated = @"// <auto-generated/>
#nullable enable

namespace MyNamespace.Tests;

partial class EnumInfo
{
    public partial string? GetName1(global::System.StringComparison value)
    {
        return value switch
        {
            global::System.StringComparison.CurrentCulture => nameof(global::System.StringComparison.CurrentCulture),
            global::System.StringComparison.CurrentCultureIgnoreCase => nameof(global::System.StringComparison.CurrentCultureIgnoreCase),
            global::System.StringComparison.InvariantCulture => nameof(global::System.StringComparison.InvariantCulture),
            global::System.StringComparison.InvariantCultureIgnoreCase => nameof(global::System.StringComparison.InvariantCultureIgnoreCase),
            global::System.StringComparison.Ordinal => nameof(global::System.StringComparison.Ordinal),
            global::System.StringComparison.OrdinalIgnoreCase => nameof(global::System.StringComparison.OrdinalIgnoreCase),
            _ => null,
        };
    }

    public static partial string GetName2(global::System.DateTimeKind val)
    {
        return val switch
        {
            global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
            global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
            global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
            _ => null!,
        };
    }
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("Roslyn.Generated.GetNameOfEnumAttribute.g.cs", Attribute),
            ("Global.GetNameOfEnum.g.cs", global),
            ("MyNamespace.Tests.EnumInfo.GetNameOfEnum.g.cs", generated));
    }
}
