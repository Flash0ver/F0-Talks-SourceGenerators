using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.Globalization;
using System.Text;
using System.Xml.Linq;

namespace F0.Talks.SourceGenerators.Demo.Roslyn4_0;

[Generator(LanguageNames.CSharp)]
internal sealed class Roslyn4_0Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValuesProvider<AdditionalText> xmlFiles =
            context.AdditionalTextsProvider.Where(static (AdditionalText text) => text.Path.EndsWith(".xml"));

        IncrementalValuesProvider<XDocument> documents =
            xmlFiles.Select(GetText)
                .Where(static document => document is not null)!;

        var source = documents.Collect();

        context.RegisterSourceOutput(source, Execute);
    }

    private static XDocument? GetText(AdditionalText additionalText, CancellationToken cancellationToken)
    {
        SourceText? text = additionalText.GetText(cancellationToken);
        if (text is null)
        {
            return null;
        }

        var document = XDocument.Parse(text.ToString());
        return document;
    }
    
    private static void Execute(SourceProductionContext context, ImmutableArray<XDocument> source)
    {
        StringBuilder builder = new();
        using StringWriter writer = new(builder, CultureInfo.InvariantCulture);
        using IndentedTextWriter text = new(writer);

        foreach (XDocument document in source)
        {
            builder.Clear();

            string name = document.Root!.Name.ToString();

            text.WriteLine("// <auto-generated/>");
            text.WriteLine("#nullable enable");
            text.WriteLine();
            text.WriteLine($@"[global::System.CodeDom.Compiler.GeneratedCode(""Roslyn4_0"", ""{DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}"")]");
            text.WriteLine($"internal sealed class {name}");
            text.WriteLine("{");
            text.Indent++;

            foreach (XElement element in document.Root.Descendants())
            {
                string property = element.FirstAttribute switch
                {
                    { Name.LocalName: "type", Value: "int" } => $"public int {element.Name} {{ get; }} = {element.Value};",
                    { Name.LocalName: "type", Value: "string" } => $@"public string {element.Name} {{ get; }} = ""{element.Value}"";",
                    _ => throw new NotImplementedException(element.ToString()),
                };

                text.WriteLine(property);
            }

            text.Indent--;
            text.WriteLine("}");

            context.AddSource($"{name}.g.cs", writer.ToString());
        }
    }
}
