using Microsoft.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.Globalization;
using System.Text;

namespace F0.Talks.SourceGenerators.Demo.Roslyn4_2;

[Generator(LanguageNames.CSharp)]
internal sealed class Roslyn4_2Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValuesProvider<MetadataReference> provider =
            context.MetadataReferencesProvider;

        var source = provider.Collect();

        context.RegisterSourceOutput(source, Execute);
    }

    private static void Execute(SourceProductionContext context, ImmutableArray<MetadataReference> source)
    {
        StringBuilder builder = new();
        using StringWriter writer = new(builder, CultureInfo.InvariantCulture);
        using IndentedTextWriter text = new(writer);

        text.WriteLine("// <auto-generated/>");
        text.WriteLine("#nullable enable");
        text.WriteLine();

        foreach (MetadataReference metadataReference in source)
        {
            string line = $"// {metadataReference.Display} ({metadataReference.Properties.Kind})";
            text.WriteLine(line);
        }

        context.AddSource("MetadataReferences.g.cs", writer.ToString());
    }
}
